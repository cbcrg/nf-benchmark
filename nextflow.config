
process {
  cpus = 2
}

params {
  
  // Input options
  input                      = ''
  pipeline                   = ''
  path_to_pipelines          = "${projectDir}/modules/pipelines"
  pipeline_path              = "${params.path_to_pipelines}/${params.pipeline}" // remove and directly
  pipeline_test_config       = "${params.pipeline_path}/conf/test.config"
  pipeline_config            = "${projectDir}/modules/pipelines/${params.pipeline}/nextflow.config"
  path_to_refData            = "${baseDir}/reference_dataset/"
  // path_to_refData         = 's3://cbcrg-eu/nf-benchmark-test-data/'     
  // Benchmark related params
  benchmarker_path           = "${projectDir}/modules/benchmarkers"
  skip_benchmark             = false
  
  // MultiQC options
  multiqc_config             = ''
  multiqc_title              = ''
  max_multiqc_email_size     = '25.MB'
  skip_multiqc               = true

  // Boilerplate options
  // Boilerplate options
  outdir                     = './results'
  tracedir                   = "${params.outdir}/pipeline_info"
  publish_dir_mode           = 'copy'
  email                      = ''
  email_on_fail              = ''
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false
  enable_conda               = false
  singularity_pull_docker_container = false

  // Config options
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = [:]
  config_profile_description = ''
  config_profile_contact     = ''
  config_profile_url         = ''

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

includeConfig 'conf/modules_config.config'

profiles {
    // nf-benchmark native profiles must be prefixed with "nfb-"
    // avoids conflicts with the pipeline and benchmarker profiles that may have the same name
    'nfb-docker' { 
      docker.enabled    = true
      docker.scratch    = true 
      // Avoid this error:
      //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
      // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
      // once this is established and works well, nextflow might implement this behavior as new default.
      docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    'nfb-singularity' {
      singularity.enabled = true
      singularity.autoMounts = true
    }
    // should be able to include params.pipeline_test_config
    'nfb-test' {
      includeConfig 'conf/nfb_test.config'
    }
    'tower' {
      params.path_to_refData = 's3://cbcrg-eu/nf-benchmark-test-data/'
      aws.batch.cliPath      = '/usr/local/bin/aws'
      params.outdir     = 's3://cbcrg-eu/results_tcoffee_server_nf'
      params.tracedir        = "${params.outdir}/pipeline_info"
      
      // Test it in local
      process.executor  = 'awsbatch'
      process.queue     = 'jose_batch_test'
      workDir           = 's3://cbcrg-eu/work'
      aws.region        = 'eu-west-1'      
      // docker.enabled    = true
      // docker.scratch    = true 
      timeline {
        enabled = true
        file = "${params.tracedir}/execution_timeline.html"
        overwrite = true
      }
      report {
        enabled = true
        file = "${params.tracedir}/execution_report.html"
        overwrite = true
      }
      trace {
        enabled = true
        file = "${params.tracedir}/execution_trace.txt"
        overwrite = true
      }
      dag {
        enabled = true
        file = "${params.tracedir}/pipeline_dag.svg"
        overwrite = true
      }    
    }
    'batch' {
      process.executor  = 'awsbatch'
      process.queue     = 'jose_batch_test'
      workDir           = 's3://cbcrg-eu/work'
      aws.region        = 'eu-west-1'
      aws.batch.cliPath = '/usr/local/bin/aws'
      params.outdir     = 's3://cbcrg-eu/results_tcoffee_server_nf'
      params.tracedir   = "${params.outdir}/pipeline_info"
      params.path_to_refData = 's3://cbcrg-eu/nf-benchmark-test-data/'
      timeline {
        enabled = true
        file = "${params.tracedir}/execution_timeline.html"
        overwrite = true
      }
      report {
        enabled = true
        file = "${params.tracedir}/execution_report.html"
        overwrite = true
      }
      trace {
        enabled = true
        file = "${params.tracedir}/execution_trace.txt"
        overwrite = true
      }
      dag {
        enabled = true
        file = "${params.tracedir}/pipeline_dag.svg"
        overwrite = true
      }
    }    
}

// Include path to bin of pipeline module (no included by default)
modulesPipelineBin = "$PATH:${params.pipeline_path}/bin:/opt/tcoffee/bin"

/*
env {
     PATH = modulesPipelineBin
}
*/

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

/*
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}
*/
manifest {
  name = 'nf-core/nf-benchmark'
  author = 'Jose Espinosa-Carrasco'
  homePage = 'https://github.com/nf-core/nf-benchmark'
  description = 'A tool to benchmark DSL2 Nextflow pipelines'
  mainScript = 'main.nf'
  nextflowVersion = '!>=20.11.0-edge'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
